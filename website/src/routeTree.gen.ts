/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as ChangelogsRouteImport } from './routes/changelogs'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocsUsesetcontextRouteImport } from './routes/docs/usesetcontext'
import { Route as DocsUserouteRouteImport } from './routes/docs/useroute'
import { Route as DocsUsecontextRouteImport } from './routes/docs/usecontext'
import { Route as DocsRoutegroupRouteImport } from './routes/docs/routegroup'
import { Route as DocsResponseRouteImport } from './routes/docs/response'
import { Route as DocsQuickStartRouteImport } from './routes/docs/quick-start'
import { Route as DocsMiddlewareRouteImport } from './routes/docs/middleware'
import { Route as DocsKeyConceptsRouteImport } from './routes/docs/key-concepts'
import { Route as DocsFullWalkthroughRouteImport } from './routes/docs/full-walkthrough'
import { Route as DocsAtAGlanceRouteImport } from './routes/docs/at-a-glance'
import { Route as DocsAppRouteImport } from './routes/docs/app'
import { Route as DocsRouteIndexRouteImport } from './routes/docs/route.index'

const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangelogsRoute = ChangelogsRouteImport.update({
  id: '/changelogs',
  path: '/changelogs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsUsesetcontextRoute = DocsUsesetcontextRouteImport.update({
  id: '/usesetcontext',
  path: '/usesetcontext',
  getParentRoute: () => DocsRoute,
} as any)
const DocsUserouteRoute = DocsUserouteRouteImport.update({
  id: '/useroute',
  path: '/useroute',
  getParentRoute: () => DocsRoute,
} as any)
const DocsUsecontextRoute = DocsUsecontextRouteImport.update({
  id: '/usecontext',
  path: '/usecontext',
  getParentRoute: () => DocsRoute,
} as any)
const DocsRoutegroupRoute = DocsRoutegroupRouteImport.update({
  id: '/routegroup',
  path: '/routegroup',
  getParentRoute: () => DocsRoute,
} as any)
const DocsResponseRoute = DocsResponseRouteImport.update({
  id: '/response',
  path: '/response',
  getParentRoute: () => DocsRoute,
} as any)
const DocsQuickStartRoute = DocsQuickStartRouteImport.update({
  id: '/quick-start',
  path: '/quick-start',
  getParentRoute: () => DocsRoute,
} as any)
const DocsMiddlewareRoute = DocsMiddlewareRouteImport.update({
  id: '/middleware',
  path: '/middleware',
  getParentRoute: () => DocsRoute,
} as any)
const DocsKeyConceptsRoute = DocsKeyConceptsRouteImport.update({
  id: '/key-concepts',
  path: '/key-concepts',
  getParentRoute: () => DocsRoute,
} as any)
const DocsFullWalkthroughRoute = DocsFullWalkthroughRouteImport.update({
  id: '/full-walkthrough',
  path: '/full-walkthrough',
  getParentRoute: () => DocsRoute,
} as any)
const DocsAtAGlanceRoute = DocsAtAGlanceRouteImport.update({
  id: '/at-a-glance',
  path: '/at-a-glance',
  getParentRoute: () => DocsRoute,
} as any)
const DocsAppRoute = DocsAppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => DocsRoute,
} as any)
const DocsRouteIndexRoute = DocsRouteIndexRouteImport.update({
  id: '/route/',
  path: '/route/',
  getParentRoute: () => DocsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/changelogs': typeof ChangelogsRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/app': typeof DocsAppRoute
  '/docs/at-a-glance': typeof DocsAtAGlanceRoute
  '/docs/full-walkthrough': typeof DocsFullWalkthroughRoute
  '/docs/key-concepts': typeof DocsKeyConceptsRoute
  '/docs/middleware': typeof DocsMiddlewareRoute
  '/docs/quick-start': typeof DocsQuickStartRoute
  '/docs/response': typeof DocsResponseRoute
  '/docs/routegroup': typeof DocsRoutegroupRoute
  '/docs/usecontext': typeof DocsUsecontextRoute
  '/docs/useroute': typeof DocsUserouteRoute
  '/docs/usesetcontext': typeof DocsUsesetcontextRoute
  '/docs/route': typeof DocsRouteIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/changelogs': typeof ChangelogsRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/app': typeof DocsAppRoute
  '/docs/at-a-glance': typeof DocsAtAGlanceRoute
  '/docs/full-walkthrough': typeof DocsFullWalkthroughRoute
  '/docs/key-concepts': typeof DocsKeyConceptsRoute
  '/docs/middleware': typeof DocsMiddlewareRoute
  '/docs/quick-start': typeof DocsQuickStartRoute
  '/docs/response': typeof DocsResponseRoute
  '/docs/routegroup': typeof DocsRoutegroupRoute
  '/docs/usecontext': typeof DocsUsecontextRoute
  '/docs/useroute': typeof DocsUserouteRoute
  '/docs/usesetcontext': typeof DocsUsesetcontextRoute
  '/docs/route': typeof DocsRouteIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/changelogs': typeof ChangelogsRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/app': typeof DocsAppRoute
  '/docs/at-a-glance': typeof DocsAtAGlanceRoute
  '/docs/full-walkthrough': typeof DocsFullWalkthroughRoute
  '/docs/key-concepts': typeof DocsKeyConceptsRoute
  '/docs/middleware': typeof DocsMiddlewareRoute
  '/docs/quick-start': typeof DocsQuickStartRoute
  '/docs/response': typeof DocsResponseRoute
  '/docs/routegroup': typeof DocsRoutegroupRoute
  '/docs/usecontext': typeof DocsUsecontextRoute
  '/docs/useroute': typeof DocsUserouteRoute
  '/docs/usesetcontext': typeof DocsUsesetcontextRoute
  '/docs/route/': typeof DocsRouteIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/changelogs'
    | '/docs'
    | '/docs/app'
    | '/docs/at-a-glance'
    | '/docs/full-walkthrough'
    | '/docs/key-concepts'
    | '/docs/middleware'
    | '/docs/quick-start'
    | '/docs/response'
    | '/docs/routegroup'
    | '/docs/usecontext'
    | '/docs/useroute'
    | '/docs/usesetcontext'
    | '/docs/route'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/changelogs'
    | '/docs'
    | '/docs/app'
    | '/docs/at-a-glance'
    | '/docs/full-walkthrough'
    | '/docs/key-concepts'
    | '/docs/middleware'
    | '/docs/quick-start'
    | '/docs/response'
    | '/docs/routegroup'
    | '/docs/usecontext'
    | '/docs/useroute'
    | '/docs/usesetcontext'
    | '/docs/route'
  id:
    | '__root__'
    | '/'
    | '/changelogs'
    | '/docs'
    | '/docs/app'
    | '/docs/at-a-glance'
    | '/docs/full-walkthrough'
    | '/docs/key-concepts'
    | '/docs/middleware'
    | '/docs/quick-start'
    | '/docs/response'
    | '/docs/routegroup'
    | '/docs/usecontext'
    | '/docs/useroute'
    | '/docs/usesetcontext'
    | '/docs/route/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChangelogsRoute: typeof ChangelogsRoute
  DocsRoute: typeof DocsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/changelogs': {
      id: '/changelogs'
      path: '/changelogs'
      fullPath: '/changelogs'
      preLoaderRoute: typeof ChangelogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/usesetcontext': {
      id: '/docs/usesetcontext'
      path: '/usesetcontext'
      fullPath: '/docs/usesetcontext'
      preLoaderRoute: typeof DocsUsesetcontextRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/useroute': {
      id: '/docs/useroute'
      path: '/useroute'
      fullPath: '/docs/useroute'
      preLoaderRoute: typeof DocsUserouteRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/usecontext': {
      id: '/docs/usecontext'
      path: '/usecontext'
      fullPath: '/docs/usecontext'
      preLoaderRoute: typeof DocsUsecontextRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/routegroup': {
      id: '/docs/routegroup'
      path: '/routegroup'
      fullPath: '/docs/routegroup'
      preLoaderRoute: typeof DocsRoutegroupRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/response': {
      id: '/docs/response'
      path: '/response'
      fullPath: '/docs/response'
      preLoaderRoute: typeof DocsResponseRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/quick-start': {
      id: '/docs/quick-start'
      path: '/quick-start'
      fullPath: '/docs/quick-start'
      preLoaderRoute: typeof DocsQuickStartRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/middleware': {
      id: '/docs/middleware'
      path: '/middleware'
      fullPath: '/docs/middleware'
      preLoaderRoute: typeof DocsMiddlewareRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/key-concepts': {
      id: '/docs/key-concepts'
      path: '/key-concepts'
      fullPath: '/docs/key-concepts'
      preLoaderRoute: typeof DocsKeyConceptsRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/full-walkthrough': {
      id: '/docs/full-walkthrough'
      path: '/full-walkthrough'
      fullPath: '/docs/full-walkthrough'
      preLoaderRoute: typeof DocsFullWalkthroughRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/at-a-glance': {
      id: '/docs/at-a-glance'
      path: '/at-a-glance'
      fullPath: '/docs/at-a-glance'
      preLoaderRoute: typeof DocsAtAGlanceRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/app': {
      id: '/docs/app'
      path: '/app'
      fullPath: '/docs/app'
      preLoaderRoute: typeof DocsAppRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/route/': {
      id: '/docs/route/'
      path: '/route'
      fullPath: '/docs/route'
      preLoaderRoute: typeof DocsRouteIndexRouteImport
      parentRoute: typeof DocsRoute
    }
  }
}

interface DocsRouteChildren {
  DocsAppRoute: typeof DocsAppRoute
  DocsAtAGlanceRoute: typeof DocsAtAGlanceRoute
  DocsFullWalkthroughRoute: typeof DocsFullWalkthroughRoute
  DocsKeyConceptsRoute: typeof DocsKeyConceptsRoute
  DocsMiddlewareRoute: typeof DocsMiddlewareRoute
  DocsQuickStartRoute: typeof DocsQuickStartRoute
  DocsResponseRoute: typeof DocsResponseRoute
  DocsRoutegroupRoute: typeof DocsRoutegroupRoute
  DocsUsecontextRoute: typeof DocsUsecontextRoute
  DocsUserouteRoute: typeof DocsUserouteRoute
  DocsUsesetcontextRoute: typeof DocsUsesetcontextRoute
  DocsRouteIndexRoute: typeof DocsRouteIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsAppRoute: DocsAppRoute,
  DocsAtAGlanceRoute: DocsAtAGlanceRoute,
  DocsFullWalkthroughRoute: DocsFullWalkthroughRoute,
  DocsKeyConceptsRoute: DocsKeyConceptsRoute,
  DocsMiddlewareRoute: DocsMiddlewareRoute,
  DocsQuickStartRoute: DocsQuickStartRoute,
  DocsResponseRoute: DocsResponseRoute,
  DocsRoutegroupRoute: DocsRoutegroupRoute,
  DocsUsecontextRoute: DocsUsecontextRoute,
  DocsUserouteRoute: DocsUserouteRoute,
  DocsUsesetcontextRoute: DocsUsesetcontextRoute,
  DocsRouteIndexRoute: DocsRouteIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChangelogsRoute: ChangelogsRoute,
  DocsRoute: DocsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
